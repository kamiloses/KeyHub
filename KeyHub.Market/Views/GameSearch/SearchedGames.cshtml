@using KeyHub.Market.Enums
@model IEnumerable<KeyHub.Market.Models.Dto.GameDto>

@{
    Layout = "_HomeLayout";
    var pageContext = ViewContextType.Search;
    
    
}

<div class="search-page-container">

    @* @await System.ComponentModel.Component.InvokeAsync("Filters", new { selectedPlatforms = ViewBag.SelectedPlatforms, selectedGenres = ViewBag.SelectedGenres }) *@

    <main class="results-section">
        <div class="results-header">
            <h2>Search Results</h2>
 
            <form method="get" action="/search">
                @if (ViewBag.SelectedPlatforms != null)
                {
                    foreach (var platform in (Platform[])ViewBag.SelectedPlatforms)
                    {
                        <input type="hidden" name="platforms" value="@platform" />
                    }
                }

                @if (ViewBag.SelectedGenres != null)
                {
                    foreach (var genre in (Genre[])ViewBag.SelectedGenres)
                    {
                        <input type="hidden" name="genres" value="@genre" />
                    }
                }
                @* todo HTML hidden input in GET forms to preserve state *@
                @* //todo name i value ogarnij  oraz to nizej*@
                @* todo ogarnij view searchedGames *@
                <div class="custom-select-wrapper">
                    <select name="sortBy" onchange="this.form.submit()">
                        <option value="ByName" selected="@(ViewBag.CurrentSort == "ByName")">Name A-Z</option>
                        <option value="ByPriceAsc" selected="@(ViewBag.CurrentSort == "ByPriceAsc")">Price Low to High</option>
                        <option value="ByPriceDesc" selected="@(ViewBag.CurrentSort == "ByPriceDesc")">Price High to Low</option>
                        <option value="ByDate" selected="@(ViewBag.CurrentSort == "ByDate")">Newest</option>
                    </select>
                </div>
            </form>
        </div>

        <div class="game-list">
            @foreach (var game in Model) 
            {
                <text>
                    @await Html.PartialAsync("_GameOverview", game, new ViewDataDictionary(ViewData) { ["Context"] = pageContext })
                </text>
            }
        </div>
    </main>
    
</div>

@* pagination *@
@await Html.PartialAsync("_Pagination")

