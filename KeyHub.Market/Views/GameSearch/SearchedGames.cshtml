@using KeyHub.Market.Enums
@using KeyHub.Market.Models.ViewModels
@model KeyHub.Market.Models.ViewModels.GameSearchViewModel

@{
    Layout = "_HomeLayout";
    var pageContext = ViewContextType.Search;
    Context context = KeyHub.Market.Enums.Context.SearchGames;
}

<div class="search-page-container">
    @await Component.InvokeAsync("Filters", new {Model.MinPrice,Model.MaxPrice, selectedPlatforms = Model.SelectedPlatforms, selectedGenres = Model.SelectedGenres })
    <main class="results-section">
        <div class="results-header">
            <h2>Search Results</h2>

            <form method="get" action="/search">

                @if (Model.SelectedPlatforms != null)
                {
                    foreach (var platform in Model.SelectedPlatforms)
                    {
                        <input type="hidden" name="SelectedPlatforms" value="@platform.ToString()" />
                    }
                }
                @if (Model.SelectedGenres != null)
                {
                    foreach (var genre in Model.SelectedGenres)
                    {
                        <input type="hidden" name="SelectedGenres" value="@genre.ToString()" />
                    }
                }
                @* todo HTML hidden input in GET forms to preserve state *@
                @* //todo name i value ogarnij  oraz to nizej*@
                @* todo ogarnij view searchedGames *@
                
                <input type="hidden" name="MinPrice" value="@Model.MinPrice" />
                <input type="hidden" name="MaxPrice" value="@Model.MaxPrice" />

                <div class="custom-select-wrapper">
                    <select name="CurrentSort" onchange="this.form.submit()">
                        @foreach (var sort in Model.SortOptions)
                        {
                            <option value="@sort" selected="@(sort.ToString().Equals(Model.CurrentSort.ToString()))">
                                @sort.ToString()
                            </option>
                        }
                    </select>
                </div>
            </form>
        </div>

        <div class="game-list">
            @foreach (var game in Model.Games)
            {
                @await Html.PartialAsync("_GameOverview", game, new ViewDataDictionary(ViewData) { ["Context"] = pageContext })
            }
        </div>
    </main>
</div>

 @await Html.PartialAsync("_Pagination", new PaginationViewModel() { CurrentPage = Model.CurrentPage,TotalPages = Model.TotalPages,CurrentSort = Model.CurrentSort,MinPrice = Model.MinPrice,MaxPrice = Model.MaxPrice,SelectedGenres  = Model.SelectedGenres,SelectedPlatforms = Model.SelectedPlatforms,context = context}) 

